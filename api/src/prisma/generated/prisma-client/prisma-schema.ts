// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateGamePlay {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Box {
  id: String!
  player: Int!
  step: Int!
  value: String!
}

input BoxCreateInput {
  id: String!
  player: Int!
  step: Int!
  value: String!
}

input BoxCreateManyInput {
  create: [BoxCreateInput!]
}

input BoxRestrictedWhereInput {
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  player: Int
  player_not: Int
  player_in: [Int!]
  player_not_in: [Int!]
  player_lt: Int
  player_lte: Int
  player_gt: Int
  player_gte: Int
  step: Int
  step_not: Int
  step_in: [Int!]
  step_not_in: [Int!]
  step_lt: Int
  step_lte: Int
  step_gt: Int
  step_gte: Int
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [BoxRestrictedWhereInput!]
}

input BoxScalarWhereInput {
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  player: Int
  player_not: Int
  player_in: [Int!]
  player_not_in: [Int!]
  player_lt: Int
  player_lte: Int
  player_gt: Int
  player_gte: Int
  step: Int
  step_not: Int
  step_in: [Int!]
  step_not_in: [Int!]
  step_lt: Int
  step_lte: Int
  step_gt: Int
  step_gte: Int
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [BoxScalarWhereInput!]
  OR: [BoxScalarWhereInput!]
  NOT: [BoxScalarWhereInput!]
}

input BoxUpdateManyDataInput {
  id: String
  player: Int
  step: Int
  value: String
}

input BoxUpdateManyInput {
  create: [BoxCreateInput!]
  deleteMany: [BoxScalarWhereInput!]
  updateMany: [BoxUpdateManyWithWhereNestedInput!]
}

input BoxUpdateManyWithWhereNestedInput {
  where: BoxScalarWhereInput!
  data: BoxUpdateManyDataInput!
}

input BoxWhereInput {
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  player: Int
  player_not: Int
  player_in: [Int!]
  player_not_in: [Int!]
  player_lt: Int
  player_lte: Int
  player_gt: Int
  player_gte: Int
  step: Int
  step_not: Int
  step_in: [Int!]
  step_not_in: [Int!]
  step_lt: Int
  step_lte: Int
  step_gt: Int
  step_gte: Int
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [BoxWhereInput!]
}

scalar DateTime

type GamePlay {
  id: ID!
  player1: String!
  player2: String!
  winner: String!
  draw: Boolean!
  boxes: [Box!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GamePlayConnection {
  pageInfo: PageInfo!
  edges: [GamePlayEdge]!
  aggregate: AggregateGamePlay!
}

input GamePlayCreateInput {
  id: ID
  player1: String!
  player2: String!
  winner: String!
  draw: Boolean!
  boxes: BoxCreateManyInput
}

type GamePlayEdge {
  node: GamePlay!
  cursor: String!
}

enum GamePlayOrderByInput {
  id_ASC
  id_DESC
  player1_ASC
  player1_DESC
  player2_ASC
  player2_DESC
  winner_ASC
  winner_DESC
  draw_ASC
  draw_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GamePlayPreviousValues {
  id: ID!
  player1: String!
  player2: String!
  winner: String!
  draw: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GamePlaySubscriptionPayload {
  mutation: MutationType!
  node: GamePlay
  updatedFields: [String!]
  previousValues: GamePlayPreviousValues
}

input GamePlaySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GamePlayWhereInput
  AND: [GamePlaySubscriptionWhereInput!]
}

input GamePlayUpdateInput {
  player1: String
  player2: String
  winner: String
  draw: Boolean
  boxes: BoxUpdateManyInput
}

input GamePlayUpdateManyMutationInput {
  player1: String
  player2: String
  winner: String
  draw: Boolean
}

input GamePlayWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  player1: String
  player1_not: String
  player1_in: [String!]
  player1_not_in: [String!]
  player1_lt: String
  player1_lte: String
  player1_gt: String
  player1_gte: String
  player1_contains: String
  player1_not_contains: String
  player1_starts_with: String
  player1_not_starts_with: String
  player1_ends_with: String
  player1_not_ends_with: String
  player2: String
  player2_not: String
  player2_in: [String!]
  player2_not_in: [String!]
  player2_lt: String
  player2_lte: String
  player2_gt: String
  player2_gte: String
  player2_contains: String
  player2_not_contains: String
  player2_starts_with: String
  player2_not_starts_with: String
  player2_ends_with: String
  player2_not_ends_with: String
  winner: String
  winner_not: String
  winner_in: [String!]
  winner_not_in: [String!]
  winner_lt: String
  winner_lte: String
  winner_gt: String
  winner_gte: String
  winner_contains: String
  winner_not_contains: String
  winner_starts_with: String
  winner_not_starts_with: String
  winner_ends_with: String
  winner_not_ends_with: String
  draw: Boolean
  draw_not: Boolean
  boxes_some: BoxWhereInput
  boxes_every: BoxRestrictedWhereInput
  boxes_none: BoxRestrictedWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [GamePlayWhereInput!]
}

input GamePlayWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createGamePlay(data: GamePlayCreateInput!): GamePlay!
  updateGamePlay(data: GamePlayUpdateInput!, where: GamePlayWhereUniqueInput!): GamePlay
  updateManyGamePlays(data: GamePlayUpdateManyMutationInput!, where: GamePlayWhereInput): BatchPayload!
  upsertGamePlay(where: GamePlayWhereUniqueInput!, create: GamePlayCreateInput!, update: GamePlayUpdateInput!): GamePlay!
  deleteGamePlay(where: GamePlayWhereUniqueInput!): GamePlay
  deleteManyGamePlays(where: GamePlayWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  gamePlay(where: GamePlayWhereUniqueInput!): GamePlay
  gamePlays(where: GamePlayWhereInput, orderBy: GamePlayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamePlay]!
  gamePlaysConnection(where: GamePlayWhereInput, orderBy: GamePlayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamePlayConnection!
  node(id: ID!): Node
}

type Subscription {
  gamePlay(where: GamePlaySubscriptionWhereInput): GamePlaySubscriptionPayload
}
`