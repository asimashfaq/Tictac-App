import React from 'react'
import { shallow, mount } from 'enzyme'
import { Provider } from 'react-redux'
import configureMockStore from 'redux-mock-store'
import GameHistory from './gamehistory'
import thunk from 'redux-thunk'
import * as ReactReduxHooks from './hook'
import waitForExpect from 'wait-for-expect'
import { async } from 'q'
import { act } from '@testing-library/react'
//jest.mock('../../redux/gamePlay/list/api')
let store: any
const middlewares = [thunk]
waitForExpect.defaults.timeout = 55000
const mockStore = configureMockStore(middlewares)
store = mockStore({
  gameplay: {
    list: {
      data: [],
      fetching: true,
      error: null,
    },
  },
})

describe('GameHistory', () => {
  let wrapper: any
  let useEffect: any

  const mockUseEffect = () => {
    useEffect.mockImplementationOnce((f: any) => {
      console.log(f)
      f()
    })
  }
  beforeEach(() => {
    /* mocking store */

    /* mocking useEffect */
    /* mocking useSelector on our mock store */

    useEffect = jest.spyOn(React, 'useEffect')

  //  jest.spyOn(ReactReduxHooks, 'useSelector').mockImplementation(state => store.getState())
    /* mocking useDispatch on our mock store  */
    jest.spyOn(ReactReduxHooks, 'useDispatch').mockImplementation(() => store.dispatch)
    /* shallow rendering */
    wrapper = mount(
      <Provider store={store}>
        <GameHistory />
      </Provider>
    )
  })

  describe('on mount', () => {
    jest.setTimeout(35000)
    it('dispatch search action to store', async () => {
     
      await act(async () => {
        wrapper
          .find('div')
          .first()
          .simulate('click')
      })
     
      await waitForExpect(() => {
        wrapper.update()
        mockUseEffect()
        mockUseEffect()
       
        expect(wrapper.find('table').length > 0).toBeTruthy()
      })
      console.log(wrapper.debug())
    })
  })
  it('dispatch search action to store', () => {})
})
